// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: user.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (username, role) VALUES (?, ?)
`

type CreateUserParams struct {
	Username string         `json:"username"`
	Role     sql.NullString `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser, arg.Username, arg.Role)
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE username = ?
`

func (q *Queries) DeleteUser(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, username)
	return err
}

const getUser = `-- name: GetUser :one
SELECT username, role, created_at FROM users WHERE username = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(&i.Username, &i.Role, &i.CreatedAt)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET role = ? WHERE username = ?
`

type UpdateUserParams struct {
	Role     sql.NullString `json:"role"`
	Username string         `json:"username"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.Role, arg.Username)
	return err
}
