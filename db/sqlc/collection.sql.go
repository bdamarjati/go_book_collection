// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: collection.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createCollection = `-- name: CreateCollection :execresult
INSERT INTO collections (user, name, status) VALUES (?, ?, ?)
`

type CreateCollectionParams struct {
	User   string         `json:"user"`
	Name   sql.NullString `json:"name"`
	Status sql.NullInt32  `json:"status"`
}

func (q *Queries) CreateCollection(ctx context.Context, arg CreateCollectionParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createCollection, arg.User, arg.Name, arg.Status)
}

const deleteCollection = `-- name: DeleteCollection :exec
DELETE FROM collections WHERE collection_id = ?
`

func (q *Queries) DeleteCollection(ctx context.Context, collectionID int32) error {
	_, err := q.db.ExecContext(ctx, deleteCollection, collectionID)
	return err
}

const getCollection = `-- name: GetCollection :one
SELECT collection_id, user, name, status, created_at FROM collections WHERE collection_id = ? LIMIT 1
`

func (q *Queries) GetCollection(ctx context.Context, collectionID int32) (Collection, error) {
	row := q.db.QueryRowContext(ctx, getCollection, collectionID)
	var i Collection
	err := row.Scan(
		&i.CollectionID,
		&i.User,
		&i.Name,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const listCollections = `-- name: ListCollections :many
SELECT collection_id, user, name, status, created_at FROM collections ORDER BY collection_id LIMIT ? OFFSET ?
`

type ListCollectionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCollections(ctx context.Context, arg ListCollectionsParams) ([]Collection, error) {
	rows, err := q.db.QueryContext(ctx, listCollections, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Collection{}
	for rows.Next() {
		var i Collection
		if err := rows.Scan(
			&i.CollectionID,
			&i.User,
			&i.Name,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCollectionsByUser = `-- name: ListCollectionsByUser :many
SELECT collection_id, user, name, status, created_at FROM collections WHERE user = ? ORDER BY collection_id LIMIT ? OFFSET ?
`

type ListCollectionsByUserParams struct {
	User   string `json:"user"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListCollectionsByUser(ctx context.Context, arg ListCollectionsByUserParams) ([]Collection, error) {
	rows, err := q.db.QueryContext(ctx, listCollectionsByUser, arg.User, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Collection{}
	for rows.Next() {
		var i Collection
		if err := rows.Scan(
			&i.CollectionID,
			&i.User,
			&i.Name,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCollection = `-- name: UpdateCollection :exec
UPDATE collections SET name = ?, status = ? WHERE collection_id = ?
`

type UpdateCollectionParams struct {
	Name         sql.NullString `json:"name"`
	Status       sql.NullInt32  `json:"status"`
	CollectionID int32          `json:"collection_id"`
}

func (q *Queries) UpdateCollection(ctx context.Context, arg UpdateCollectionParams) error {
	_, err := q.db.ExecContext(ctx, updateCollection, arg.Name, arg.Status, arg.CollectionID)
	return err
}
